{
  "comments": [
    {
      "key": {
        "uuid": "4ccd08e9_08e3c21a",
        "filename": "policy-agent/src/main/java/org/oransc/policyagent/clients/AsyncRestClient.java",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1000103
      },
      "writtenOn": "2020-04-30T12:06:02Z",
      "side": 1,
      "message": "Suggest adding a new logger: \nprivate static final Logger logger2 \u003d LoggerFactory.getLogger(\"org.oransc.logger-a1messages\");\n(Or soemthing similar)",
      "range": {
        "startLine": 53,
        "startChar": 0,
        "endLine": 54,
        "endChar": 1
      },
      "revId": "5e03b7b4d19603e7a6df4cff598ff358fba6e3c2",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "826c2e4f_5883e97e",
        "filename": "policy-agent/src/main/java/org/oransc/policyagent/clients/AsyncRestClient.java",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-30T14:44:31Z",
      "side": 1,
      "message": "In this case the bodies are traced on TRACE level. \nSo if the line in application.yaml \n\norg.oransc.policyagent: INFO\n\nis changed to DEBUG (or changed by the REST actuator), then the bodies are not traced, \nbut if it is changed to TRACE it will be. Very simple. \n\nThis follows the the tracing pattern for other components.\n\nIf you are trouble shooting, you do not want to spend a lot of time figuring out that a component has chosen an unorthodox logging. You often just want to enable the root logger.",
      "parentUuid": "4ccd08e9_08e3c21a",
      "range": {
        "startLine": 53,
        "startChar": 0,
        "endLine": 54,
        "endChar": 1
      },
      "revId": "5e03b7b4d19603e7a6df4cff598ff358fba6e3c2",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bfecaebb_35d8a9ac",
        "filename": "policy-agent/src/main/java/org/oransc/policyagent/clients/AsyncRestClient.java",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1000103
      },
      "writtenOn": "2020-05-01T10:32:33Z",
      "side": 1,
      "message": "Yes - and you often just want to know what messages were sent where.",
      "parentUuid": "826c2e4f_5883e97e",
      "range": {
        "startLine": 53,
        "startChar": 0,
        "endLine": 54,
        "endChar": 1
      },
      "revId": "5e03b7b4d19603e7a6df4cff598ff358fba6e3c2",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4da468c0_2efbfda2",
        "filename": "policy-agent/src/main/java/org/oransc/policyagent/clients/AsyncRestClient.java",
        "patchSetId": 3
      },
      "lineNbr": 66,
      "author": {
        "id": 1000103
      },
      "writtenOn": "2020-04-30T12:06:02Z",
      "side": 1,
      "message": "Suggest - In addition to the trace above: \n\nif(logger2.isInfoEnabled(){\n   logger2.info(\"{} POST uri \u003d \u0027{}{}\u0027\u0027\", traceTag, baseUrl, uri);\n   logger2.info(\"{} POST body: {}\", traceTag, body);\n}\n\nThen this logger can be individually enabled/disabled in the log settings\n\nThis logger would then ONLY print the URIs and messages - so this logger only could be redirected to a difference file/console/etc than all other log messages.\n\nIf a logger with the same name (e.g. \"org.oransc.logger-a1messages\" above) is created in the other components (dashboard, controller, sim etc) - then we would be able to capture JUST the entire end-to-end messages - no other logs.",
      "range": {
        "startLine": 66,
        "startChar": 1,
        "endLine": 66,
        "endChar": 2
      },
      "revId": "5e03b7b4d19603e7a6df4cff598ff358fba6e3c2",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64e994a8_08817200",
        "filename": "policy-agent/src/main/java/org/oransc/policyagent/clients/AsyncRestClient.java",
        "patchSetId": 3
      },
      "lineNbr": 66,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-30T14:44:31Z",
      "side": 1,
      "message": "The logger for this class there can individually be enabled and disabled too. \nThe logger for this class prints URIs on DEBUG level and bodies etc.on TRACE level.",
      "parentUuid": "4da468c0_2efbfda2",
      "range": {
        "startLine": 66,
        "startChar": 1,
        "endLine": 66,
        "endChar": 2
      },
      "revId": "5e03b7b4d19603e7a6df4cff598ff358fba6e3c2",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e462e63_49f87972",
        "filename": "policy-agent/src/main/java/org/oransc/policyagent/clients/AsyncRestClient.java",
        "patchSetId": 3
      },
      "lineNbr": 66,
      "author": {
        "id": 1000103
      },
      "writtenOn": "2020-05-01T10:32:33Z",
      "side": 1,
      "message": "Yes i am very aware of that. \nI am requesting a separate logger - that would JUST have the messages and would NOT have all of the other trace/debug information logged to it.\nIf you don\u0027t want to do this in this review then it can be merged and I will raise a separate ticket for all components.",
      "parentUuid": "64e994a8_08817200",
      "range": {
        "startLine": 66,
        "startChar": 1,
        "endLine": 66,
        "endChar": 2
      },
      "revId": "5e03b7b4d19603e7a6df4cff598ff358fba6e3c2",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97ba413f_f068f5e7",
        "filename": "policy-agent/src/main/java/org/oransc/policyagent/clients/AsyncRestClient.java",
        "patchSetId": 3
      },
      "lineNbr": 66,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-05-04T07:26:15Z",
      "side": 1,
      "message": "Please write a ticket then. \nThis logger (the logger fot this class) already contains JUST this information (REST call information) and does NOT contain anything else. It can already be enabled separately. \n\nIf you write a ticket, please describe which problem you you want to solve, because that is unclear to me. Please also consider how the idea of having several different log files would integrate to the spring boot framework and Kibana (which is used in ONAP).",
      "parentUuid": "9e462e63_49f87972",
      "range": {
        "startLine": 66,
        "startChar": 1,
        "endLine": 66,
        "endChar": 2
      },
      "revId": "5e03b7b4d19603e7a6df4cff598ff358fba6e3c2",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7aee718_6c7fab88",
        "filename": "policy-agent/src/main/java/org/oransc/policyagent/clients/AsyncRestClient.java",
        "patchSetId": 3
      },
      "lineNbr": 86,
      "author": {
        "id": 1000103
      },
      "writtenOn": "2020-04-30T12:06:02Z",
      "side": 1,
      "message": "same as above .... \nand below",
      "range": {
        "startLine": 85,
        "startChar": 8,
        "endLine": 86,
        "endChar": 16
      },
      "revId": "5e03b7b4d19603e7a6df4cff598ff358fba6e3c2",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53",
      "unresolved": true
    }
  ]
}