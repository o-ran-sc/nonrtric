{
  "comments": [
    {
      "key": {
        "uuid": "978a6974_3c8d9ac1",
        "filename": "policy-agent/src/test/java/org/oransc/policyagent/clients/SdncOscA1ClientTest.java",
        "patchSetId": 2
      },
      "lineNbr": 75,
      "author": {
        "id": 1000201
      },
      "writtenOn": "2020-02-24T14:12:48Z",
      "side": 1,
      "message": "I suggest calling it \"clientUnderTest\" to make it easier to see what is actually tested.",
      "range": {
        "startLine": 75,
        "startChar": 20,
        "endLine": 75,
        "endChar": 28
      },
      "revId": "61612215aa65d999c0594ece628fea921a4eb79c",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c30306e_a7639d2c",
        "filename": "policy-agent/src/test/java/org/oransc/policyagent/clients/SdncOscA1ClientTest.java",
        "patchSetId": 2
      },
      "lineNbr": 86,
      "author": {
        "id": 1000201
      },
      "writtenOn": "2020-02-24T14:12:48Z",
      "side": 1,
      "message": "There is no need to spy on this since no mocking is done for it.",
      "range": {
        "startLine": 86,
        "startChar": 19,
        "endLine": 86,
        "endChar": 22
      },
      "revId": "61612215aa65d999c0594ece628fea921a4eb79c",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b1d190f5_f552078f",
        "filename": "policy-agent/src/test/java/org/oransc/policyagent/clients/SdncOscA1ClientTest.java",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 1000201
      },
      "writtenOn": "2020-02-24T14:12:48Z",
      "side": 1,
      "message": "Why not put this method call into the createInputJsonString method? I think it would make the code easier to read.",
      "range": {
        "startLine": 95,
        "startChar": 55,
        "endLine": 95,
        "endChar": 67
      },
      "revId": "61612215aa65d999c0594ece628fea921a4eb79c",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2771c74a_cd20ecf5",
        "filename": "policy-agent/src/test/java/org/oransc/policyagent/clients/SdncOscA1ClientTest.java",
        "patchSetId": 2
      },
      "lineNbr": 97,
      "author": {
        "id": 1000201
      },
      "writtenOn": "2020-02-24T14:12:48Z",
      "side": 1,
      "message": "There is no need to create an array of strings, the method \"asList\" takes an arbitrary number of strings as parameters.",
      "range": {
        "startLine": 97,
        "startChar": 51,
        "endLine": 97,
        "endChar": 65
      },
      "revId": "61612215aa65d999c0594ece628fea921a4eb79c",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2eae1618_7db44675",
        "filename": "policy-agent/src/test/java/org/oransc/policyagent/clients/SdncOscA1ClientTest.java",
        "patchSetId": 2
      },
      "lineNbr": 99,
      "author": {
        "id": 1000201
      },
      "writtenOn": "2020-02-24T14:12:48Z",
      "side": 1,
      "message": "Maybe create a method called \"createJsonResponse\" that uses the \"createOutputJsonString\" method but wraps the result in a Mono? Would make the code easier to read.",
      "range": {
        "startLine": 99,
        "startChar": 22,
        "endLine": 99,
        "endChar": 44
      },
      "revId": "61612215aa65d999c0594ece628fea921a4eb79c",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e09d86f3_2736a153",
        "filename": "policy-agent/src/test/java/org/oransc/policyagent/clients/SdncOscA1ClientTest.java",
        "patchSetId": 2
      },
      "lineNbr": 176,
      "author": {
        "id": 1000201
      },
      "writtenOn": "2020-02-24T13:39:05Z",
      "side": 1,
      "message": "This is a difficult statement to read and it appears in all test cases. I suggest replacing this with a method, called something like \"whenAsyncPostThenReturn\", that takes the response as an argument. Then it will be easier to understand what is happening.",
      "revId": "61612215aa65d999c0594ece628fea921a4eb79c",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "652f1055_6b596e02",
        "filename": "policy-agent/src/test/java/org/oransc/policyagent/clients/SdncOscA1ClientTest.java",
        "patchSetId": 2
      },
      "lineNbr": 176,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2020-02-24T13:56:56Z",
      "side": 1,
      "message": "Ok, but it does not seem to work when we have multiple responses from this statement. For example, in testDeleteAllPolicies:\n\nwhen(asyncRestClientMock.postWithAuthHeader(anyString(), anyString(), anyString(), anyString()))\n            .thenReturn(policyIdsResp).thenReturn(Mono.empty());",
      "parentUuid": "e09d86f3_2736a153",
      "revId": "61612215aa65d999c0594ece628fea921a4eb79c",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7dfe1dd5_3675ff73",
        "filename": "policy-agent/src/test/java/org/oransc/policyagent/clients/SdncOscA1ClientTest.java",
        "patchSetId": 2
      },
      "lineNbr": 176,
      "author": {
        "id": 1000201
      },
      "writtenOn": "2020-02-24T14:12:48Z",
      "side": 1,
      "message": "The new method could return the same as the \"when\" method. Then the extra returns can be chained on when needed.",
      "parentUuid": "652f1055_6b596e02",
      "revId": "61612215aa65d999c0594ece628fea921a4eb79c",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "992cfa30_5184aefd",
        "filename": "policy-agent/src/test/java/org/oransc/policyagent/clients/SdncOscA1ClientTest.java",
        "patchSetId": 2
      },
      "lineNbr": 176,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2020-02-24T14:21:32Z",
      "side": 1,
      "message": "I am not sure if I understand exactly. Can you give an example of how to chain the extra returns, if we have this method:\n\nprivate void whenAsyncPostThenReturn (Mono\u003cString\u003e response) {\n     when(asyncRestClientMock.postWithAuthHeader(anyString(), anyString(), anyString(), anyString())).thenReturn(response);\n}",
      "parentUuid": "7dfe1dd5_3675ff73",
      "revId": "61612215aa65d999c0594ece628fea921a4eb79c",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "422c9e19_1b9f987f",
        "filename": "policy-agent/src/test/java/org/oransc/policyagent/clients/SdncOscA1ClientTest.java",
        "patchSetId": 2
      },
      "lineNbr": 176,
      "author": {
        "id": 1000201
      },
      "writtenOn": "2020-02-24T14:51:53Z",
      "side": 1,
      "message": "private OngoingStubbing\u003cMono\u003cString\u003e\u003e whenAsyncPostThenReturn (Mono\u003cString\u003e response) {\n     return when(asyncRestClientMock.postWithAuthHeader(anyString(), anyString(), anyString(), anyString())).thenReturn(response);\n}",
      "parentUuid": "992cfa30_5184aefd",
      "revId": "61612215aa65d999c0594ece628fea921a4eb79c",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb3a80f2_dd910c05",
        "filename": "policy-agent/src/test/java/org/oransc/policyagent/clients/SdncOscA1ClientTest.java",
        "patchSetId": 2
      },
      "lineNbr": 176,
      "author": {
        "id": 1000201
      },
      "writtenOn": "2020-02-24T14:53:26Z",
      "side": 1,
      "message": "Then the test code would look like the following: whenAsyncPostThenReturn (policyTypeResp).thenReturn(response2).thenReturn(response3);",
      "parentUuid": "422c9e19_1b9f987f",
      "revId": "61612215aa65d999c0594ece628fea921a4eb79c",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af7ae52d_09d86b12",
        "filename": "policy-agent/src/test/java/org/oransc/policyagent/clients/SdncOscA1ClientTest.java",
        "patchSetId": 2
      },
      "lineNbr": 270,
      "author": {
        "id": 1000201
      },
      "writtenOn": "2020-02-24T14:12:48Z",
      "side": 1,
      "message": "Maybe these methods that are exactly the same in many of the client test classes can be broken out to static methods in a test utility class to reduce duplicated code?",
      "revId": "61612215aa65d999c0594ece628fea921a4eb79c",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53",
      "unresolved": true
    }
  ]
}