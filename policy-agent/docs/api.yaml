swagger: '2.0'
info:
  description: The O-RAN Non-RT RIC PolicyAgent provides a REST API for management of A1 policices.
  version: '1.0'
  title: A1 Policy management service
host: 'localhost:8081'
basePath: /
tags:
  - name: A1 Policy Management
    description: Policy Controller
  - name: Health check
    description: Status Controller
  - name: RIC Repository
    description: Ric Repository Controller
  - name: Service registry and supervision
    description: Service Controller
schemes:
  - https
  - http
paths:
  /policies:
    get:
      tags:
        - A1 Policy Management
      summary: Query policies
      operationId: getPoliciesUsingGET
      produces:
        - 'text/plain;charset=ISO-8859-1'
      parameters:
        - name: ric
          in: query
          description: The name of the Near-RT RIC to get policies for.
          required: false
          type: string
          allowEmptyValue: false
        - name: service
          in: query
          description: The name of the service to get policies for.
          required: false
          type: string
          allowEmptyValue: false
        - name: type
          in: query
          description: The name of the policy type to get policies for.
          required: false
          type: string
          allowEmptyValue: false
      responses:
        '200':
          description: Policies
          schema:
            type: array
            items:
              $ref: '#/definitions/PolicyInfo'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: RIC or type not found
          schema:
            type: string
            example: RIC not found
      deprecated: false
  /policy:
    get:
      tags:
        - A1 Policy Management
      summary: Returns a policy configuration
      operationId: getPolicyUsingGET
      produces:
        - 'text/plain;charset=ISO-8859-1'
      parameters:
        - name: id
          in: query
          description: The ID of the policy instance.
          required: true
          type: string
          allowEmptyValue: false
      responses:
        '200':
          description: Policy found
          schema:
            type: object
            example:
              scope:
                qosId: '1'
                ueId: '1'
              statement:
                priorityLevel: 1
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Policy is not found
          schema:
            type: string
            example: 'Could not find policy: e26d76e1-b43f-427e-a3c2-b7c4e05a6431'
      deprecated: false
    put:
      tags:
        - A1 Policy Management
      summary: Put a policy
      operationId: putPolicyUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: id
          in: query
          description: The ID of the policy instance.
          required: true
          type: string
          allowEmptyValue: false
        - in: body
          name: jsonBody
          description: jsonBody
          required: true
          schema:
            type: object
            example:
                scope:
                  qosId: '3'
                  ueId: '1'
                statement:
                  priorityLevel: 1
        - name: ric
          in: query
          description: The name of the Near-RT RIC where the policy will be created.
          required: true
          type: string
          allowEmptyValue: false
        - name: service
          in: query
          description: The name of the service creating the policy.
          required: true
          type: string
          allowEmptyValue: false
        - name: transient
          in: query
          description: If the policy is transient or not (boolean defaulted to false). A policy is transient if it will be forgotten when the service needs to reconnect to the Near-RT RIC.
          required: false
          type: boolean
          default: false
          allowEmptyValue: false
          x-example: false
        - name: type
          in: query
          description: The name of the policy type.
          required: false
          type: string
          allowEmptyValue: false
      responses:
        '200':
          description: Policy updated
        '201':
          description: Policy created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: RIC or policy type is not found
        '423':
          description: RIC is not operational
          schema:
            type: string
      deprecated: false
    delete:
      tags:
        - A1 Policy Management
      summary: Delete a policy
      operationId: deletePolicyUsingDELETE
      produces:
        - '*/*'
      parameters:
        - name: id
          in: query
          description: The ID of the policy instance.
          required: true
          type: string
          allowEmptyValue: false
      responses:
        '200':
          description: OK
        '204':
          description: Policy deleted
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Policy is not found
        '423':
          description: RIC is not operational
          schema:
            type: string
      deprecated: false
  /policy_ids:
    get:
      tags:
        - A1 Policy Management
      summary: 'Query policies, only IDs returned'
      operationId: getPolicyIdsUsingGET
      produces:
        - 'text/plain;charset=ISO-8859-1'
      parameters:
        - name: ric
          in: query
          description: The name of the Near-RT RIC to get policies for.
          required: false
          type: string
          allowEmptyValue: false
        - name: service
          in: query
          description: The name of the service to get policies for.
          required: false
          type: string
          allowEmptyValue: false
        - name: type
          in: query
          description: The name of the policy type to get policies for.
          required: false
          type: string
          allowEmptyValue: false
      responses:
        '200':
          description: Policy ids
          schema:
            type: array
            items:
              type: string
            example:
            - 73428e58-1670-4972-8498-e7e8f1003631
            - 73428e58-1670-4972-8498-e7e8f100363e
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: RIC or type not found
          schema:
            type: string
            example: RIC not found
      deprecated: false
  /policy_schema:
    get:
      tags:
        - A1 Policy Management
      summary: Returns one policy type schema definition
      operationId: getPolicySchemaUsingGET
      produces:
        - 'text/plain;charset=ISO-8859-1'
      parameters:
        - name: id
          in: query
          description: The ID of the policy type to get the definition for.
          required: true
          type: string
          allowEmptyValue: false
      responses:
        '200':
          description: Policy schema
          schema:
            type: object
            example:
              $schema: 'http://json-schema.org/draft-07/schema#'
              description: QoS policy type
              title: '1'
              type: object
              properties:
                scope:
                  additionalProperties: false
                  type: object
                  properties:
                    qosId:
                      type: string
                    ueId:
                      type: string
                  required:
                    - ueId
                    - qosId
                statement:
                  additionalProperties: false
                  type: object
                  properties:
                    priorityLevel:
                      type: number
                  required:
                    - priorityLevel
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: RIC is not found
          schema:
            type: string
            example: 'org.oransc.policyagent.exceptions.ServiceException: Could not find type: 11'
      deprecated: false
  /policy_schemas:
    get:
      tags:
        - A1 Policy Management
      summary: Returns policy type schema definitions
      operationId: getPolicySchemasUsingGET
      produces:
        - 'text/plain;charset=ISO-8859-1'
      parameters:
        - name: ric
          in: query
          description: The name of the Near-RT RIC to get the definitions for.
          required: false
          type: string
          allowEmptyValue: false
      responses:
        '200':
          description: Policy schemas
          schema:
            type: array
            items:
              type: object
            example:
              - $schema: 'http://json-schema.org/draft-07/schema#'
                description: QoS policy type
                title: '1'
                type: object
                properties:
                  scope:
                    additionalProperties: false
                    type: object
                    properties:
                      qosId:
                        type: string
                      ueId:
                        type: string
                    required:
                      - ueId
                      - qosId
                  statement:
                    additionalProperties: false
                    type: object
                    properties:
                      priorityLevel:
                        type: number
                    required:
                      - priorityLevel
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: RIC is not found
          schema:
            type: string
            example: 'org.oransc.policyagent.exceptions.ServiceException: Could not find ric: ric11'
      deprecated: false
  /policy_status:
    get:
      tags:
        - A1 Policy Management
      summary: Returns a policy status
      operationId: getPolicyStatusUsingGET
      produces:
        - 'text/plain;charset=ISO-8859-1'
      parameters:
        - name: id
          in: query
          description: The ID of the policy.
          required: true
          type: string
          allowEmptyValue: false
      responses:
        '200':
          description: Policy status
          schema:
            type: object
            example:
              instance_status: NOT IN EFFECT
              has_been_deleted: 'false'
              created_at: '07/20/2020, 17:15:39'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Policy is not found
          schema:
            type: string
            example: 'Could not find policy: 73428e58-1670-4972-8498-e7e8f100363q'
      deprecated: false
  /policy_types:
    get:
      tags:
        - A1 Policy Management
      summary: Query policy type names
      operationId: getPolicyTypesUsingGET
      produces:
        - 'text/plain;charset=ISO-8859-1'
      parameters:
        - name: ric
          in: query
          description: The name of the Near-RT RIC to get types for.
          required: false
          type: string
          allowEmptyValue: false
      responses:
        '200':
          description: Policy type names
          schema:
            type: array
            items:
              type: string
            example:
              - '1'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: RIC is not found
          schema:
            type: string
            example: 'org.oransc.policyagent.exceptions.ServiceException: Could not find ric: ric11'
      deprecated: false
  /ric:
    get:
      tags:
        - RIC Repository
      summary: Returns the name of a RIC managing one Mananged Element
      operationId: getRicUsingGET
      produces:
        - 'text/plain;charset=ISO-8859-1'
      parameters:
        - name: managedElementId
          in: query
          description: The ID of the Managed Element
          required: true
          type: string
          allowEmptyValue: false
      responses:
        '200':
          description: RIC is found
          schema:
            type: string
            example: ric1
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: RIC is not found
          schema:
            type: string
            example: 'No RIC found'
      deprecated: false
  /rics:
    get:
      tags:
        - RIC Repository
      summary: Query Near-RT RIC information
      operationId: getRicsUsingGET
      produces:
        - 'text/plain;charset=ISO-8859-1'
      parameters:
        - name: policyType
          in: query
          description: The name of the policy type
          required: false
          type: string
          allowEmptyValue: false
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/RicInfo'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Policy type is not found
          schema:
            type: string
            example: Policy type not found
      deprecated: false
  /service:
    put:
      tags:
        - Service registry and supervision
      summary: Register a service
      operationId: putServiceUsingPUT
      consumes:
        - application/json
      produces:
        - 'text/plain;charset=ISO-8859-1'
      parameters:
        - in: body
          name: registrationInfo
          description: registrationInfo
          required: true
          schema:
            $ref: '#/definitions/ServiceRegistrationInfo'
      responses:
        '200':
          description: Service updated
          schema:
            type: string
        '201':
          description: Service created
          schema:
            type: string
            example:
                OK
        '400':
          description: The ServiceRegistrationInfo is not accepted
          schema:
            type: string
            example: Missing mandatory parameter 'serviceName'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /services:
    get:
      tags:
        - Service registry and supervision
      summary: Returns service information
      operationId: getServicesUsingGET
      produces:
        - 'text/plain;charset=ISO-8859-1'
      parameters:
        - name: name
          in: query
          description: The name of the service
          required: false
          type: string
          allowEmptyValue: false
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/ServiceStatus'
            example:
            - serviceName: '123'
              keepAliveIntervalSeconds: 1000
              timeSinceLastActivitySeconds: 7
              callbackUrl: 'http://localhost:8080'
            
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Service is not found
          schema:
            type: string
            example: Service not found
      deprecated: false
    delete:
      tags:
        - Service registry and supervision
      summary: Delete a service
      operationId: deleteServiceUsingDELETE
      produces:
        - '*/*'
      parameters:
        - name: name
          in: query
          description: The name of the service
          required: true
          type: string
          allowEmptyValue: false
      responses:
        '200':
          description: OK
        '204':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Service not found
          schema:
            type: string
            example: 'Could not find service: service1'
      deprecated: false
  /services/keepalive:
    put:
      tags:
        - Service registry and supervision
      summary: Heartbeat from a serice
      operationId: keepAliveServiceUsingPUT
      consumes:
        - application/json
      produces:
        - 'text/plain;charset=ISO-8859-1'
      parameters:
        - name: name
          in: query
          description: The name of the service
          required: true
          type: string
          allowEmptyValue: false
      responses:
        '200':
          description: 'Service supervision timer refreshed, OK'
          schema:
            type: string
            example: OK
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: 'The service is not found, needs re-registration'
          schema:
            type: string
            example: 'Could not find service: service2'
      deprecated: false
  /status:
    get:
      tags:
        - Health check
      summary: Returns status and statistics of this service
      operationId: getStatusUsingGET
      produces:
        - '*/*'
      responses:
        '200':
          description: Service is living
          schema:
            type: string
            example: alive
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
definitions:
  Mono«ResponseEntity«object»»:
    type: object
    title: Mono«ResponseEntity«object»»
  Mono«ResponseEntity«string»»:
    type: object
    title: Mono«ResponseEntity«string»»
  PolicyInfo:
    type: object
    properties:
      id:
        type: string
        description: identity of the policy
      json:
        type: object
        description: the configuration of the policy
      lastModified:
        type: string
        description: 'timestamp, last modification time'
      ric:
        type: string
        description: identity of the target Near-RT RIC
      service:
        type: string
        description: the name of the service owning the policy
      type:
        type: string
        description: name of the policy type
    title: PolicyInfo
    example:
        id: e26d76e1-b43f-427e-a3c2-b7c4e05a643a
        type: '1'
        ric: ric1
        json:
          scope:
            qosId: '1'
            ueId: '1'
          statement:
            priorityLevel: 1
        service: controlpanel
        lastModified: '2020-07-20T14:48:52.034929Z'
  RicInfo:
    type: object
    properties:
      managedElementIds:
        type: array
        description: O1 identities for managed entities
        items:
          type: string
      policyTypes:
        type: array
        description: supported policy types
        items:
          type: string
      ricName:
        type: string
        description: identity of the ric
      state:
        type: string
        description: state info
    title: RicInfo
    example:
      - ricName: ric1
        managedElementIds:
          - kista_1
          - kista_2
        policyTypes:
          - '1'
        state: AVAILABLE
  ServiceRegistrationInfo:
    type: object
    required:
      - serviceName
    properties:
      callbackUrl:
        type: string
        description: callback for notifying of RIC synchronization
      keepAliveIntervalSeconds:
        type: integer
        format: int64
        description: 'keep alive interval for the service. This is a heartbeat supervision of the service, which in regular intevals must invoke a ''keepAlive'' REST call. When a service does not invoke this call within the given time, it is considered unavailble. An unavailable service will be automatically deregistered and its policies will be deleted. Value 0 means no timeout supervision.'
      serviceName:
        type: string
        description: identity of the service
    title: ServiceRegistrationInfo
    example:
      callbackUrl: 'http://localhost:9080'
      keepAliveIntervalSeconds: 1000
      serviceName: 'service1'
  ServiceStatus:
    type: object
    properties:
      callbackUrl:
        type: string
        description: callback for notifying of RIC synchronization
      keepAliveIntervalSeconds:
        type: integer
        format: int64
        description: policy keep alive timeout
      serviceName:
        type: string
        description: identity of the service
      timeSinceLastActivitySeconds:
        type: integer
        format: int64
        description: time since last invocation by the service
    title: ServiceStatus